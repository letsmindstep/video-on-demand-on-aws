name: Build and Deploy VOD on AWS

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true
        default: 'v1.0.0'
      admin_email:
        description: 'Admin email address for SNS notifications'
        required: true
      workflow_trigger:
        description: 'Workflow Trigger (VideoFile or MetadataFile)'
        required: false
        default: 'MetadataFile'
        type: choice
        options:
          - VideoFile
          - MetadataFile
      glacier:
        description: 'Archive option'
        required: false
        default: 'DISABLED'
        type: choice
        options:
          - DISABLED
          - GLACIER
          - DEEP_ARCHIVE
      frame_capture:
        description: 'Enable Frame Capture (Yes or No)'
        required: false
        default: 'Yes'
        type: choice
        options:
          - Yes
          - No
      enable_media_package:
        description: 'Enable MediaPackage VOD (Yes or No)'
        required: false
        default: 'Yes'
        type: choice
        options:
          - Yes
          - No
      enable_sns:
        description: 'Enable SNS Notifications (Yes or No)'
        required: false
        default: 'Yes'
        type: choice
        options:
          - Yes
          - No
      enable_sqs:
        description: 'Enable SQS Notifications (Yes or No)'
        required: false
        default: 'Yes'
        type: choice
        options:
          - Yes
          - No
      accelerated_transcoding:
        description: 'Accelerated Transcoding (ENABLED, DISABLED, or PREFERRED)'
        required: false
        default: 'PREFERRED'
        type: choice
        options:
          - ENABLED
          - DISABLED
          - PREFERRED

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: nonprod

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install Python dependencies
      run: |
        pip install boto3 pytest coverage
      

    - name: Run unit tests
      run: |
        cd ./deployment
        chmod +x ./run-unit-tests.sh
        ./run-unit-tests.sh

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential autoconf automake libtool pkg-config libcurl4-openssl-dev xz-utils wget
      shell: bash
  
    - name: Build MediaInfo from source
      run: |
        cd $GITHUB_WORKSPACE
        wget https://mediaarea.net/download/binary/mediainfo/20.09/MediaInfo_CLI_20.09_GNU_FromSource.tar.xz
        tar xvf MediaInfo_CLI_20.09_GNU_FromSource.tar.xz
        cd MediaInfo_CLI_GNU_FromSource/
        chmod +x CLI_Compile.sh
        ./CLI_Compile.sh --with-libcurl
        mkdir -p $GITHUB_WORKSPACE/source/mediainfo/bin
        cp MediaInfo/Project/GNU/CLI/mediainfo $GITHUB_WORKSPACE/source/mediainfo/bin/
      shell: bash

    - name: Build distribution packages
      run: |
        cd ./deployment
        chmod +x ./build-s3-dist.sh
        ./build-s3-dist.sh mindstep-vod-on-aws-staging-bucket video-on-demand-on-aws ${{ github.event.inputs.version }}
      env:
        AWS_REGION: eu-west-1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/DevDeploymentRole
        aws-region: eu-west-1

    - name: Ensure S3 bucket ownership
      run: |
        aws s3api head-bucket --bucket $BUCKET_NAME --expected-bucket-owner $AWS_ACCOUNT_ID
      env:
        BUCKET_NAME: mindstep-vod-on-aws-staging-bucket-eu-west-1
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        AWS_DEFAULT_REGION: eu-west-1

    - name: Upload distribution to S3
      run: |
        aws s3 sync ./deployment/regional-s3-assets/ s3://$BUCKET_NAME/video-on-demand-on-aws/${{ github.event.inputs.version }}/
        aws s3 sync ./deployment/global-s3-assets/ s3://$BUCKET_NAME/video-on-demand-on-aws/${{ github.event.inputs.version }}/
      env:
        AWS_DEFAULT_REGION: eu-west-1
        BUCKET_NAME: mindstep-vod-on-aws-staging-bucket-eu-west-1

    - name: Deploy CloudFormation stack
      run: |
        TEMPLATE_URL="https://$BUCKET_NAME.s3.eu-west-1.amazonaws.com/video-on-demand-on-aws/${{ github.event.inputs.version }}/video-on-demand-on-aws.template"
        STACK_NAME=vod-on-aws-stack-staging

        PARAMS="ParameterKey=AdminEmail,ParameterValue='${{ github.event.inputs.admin_email }}' \
        ParameterKey=WorkflowTrigger,ParameterValue=${{ github.event.inputs.workflow_trigger }} \
        ParameterKey=Glacier,ParameterValue=${{ github.event.inputs.glacier }} \
        ParameterKey=FrameCapture,ParameterValue=${{ github.event.inputs.frame_capture }} \
        ParameterKey=EnableMediaPackage,ParameterValue=${{ github.event.inputs.enable_media_package }} \
        ParameterKey=EnableSns,ParameterValue=${{ github.event.inputs.enable_sns }} \
        ParameterKey=EnableSqs,ParameterValue=${{ github.event.inputs.enable_sqs }} \
        ParameterKey=AcceleratedTranscoding,ParameterValue=${{ github.event.inputs.accelerated_transcoding }}"
    
        set +e
        aws cloudformation describe-stacks --stack-name $STACK_NAME --region $AWS_DEFAULT_REGION
        if [ $? -eq 0 ]; then
            echo "Updating existing stack..."
            aws cloudformation update-stack \
            --stack-name $STACK_NAME \
            --template-url $TEMPLATE_URL \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters $PARAMS \
            --region $AWS_DEFAULT_REGION
        else
            echo "Creating new stack..."
            aws cloudformation create-stack \
            --stack-name $STACK_NAME \
            --template-url $TEMPLATE_URL \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameters $PARAMS \
            --region $AWS_DEFAULT_REGION
        fi
      env:
        BUCKET_NAME: mindstep-vod-on-aws-staging-bucket-eu-west-1
        AWS_DEFAULT_REGION: eu-west-1
      shell: bash
